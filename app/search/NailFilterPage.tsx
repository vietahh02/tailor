"use client";

import { useState, useEffect } from "react";
import { Checkbox, Radio, Row, Col, Divider } from "antd";
import "antd/dist/reset.css";
import ListProduct from "./ListProduct";
import { useSearchParams } from "next/navigation";

const mockProducts = [
  { id: 1, name: "Nail Style A", tags: ["tr·∫ª trung", "vƒÉn ph√≤ng"] },
  { id: 2, name: "Nail Style B", tags: ["sang tr·ªçng", "ƒëi ti·ªác"] },
  { id: 3, name: "Nail Style C", tags: ["d·ªÖ th∆∞∆°ng", "sinh vi√™n"] },
];

export default function NailFilterPage() {
  // ==== FILTER STATE ====
  const [selectedStyles, setSelectedStyles] = useState<string[]>([]);
  const [selectedJobs, setSelectedJobs] = useState<string[]>([]);
  const [colors, setColors] = useState<string[]>([]);
  const [patterns, setPatterns] = useState<string[]>([]);
  const [length, setLength] = useState<string | null>(null);
  const [type, setType] = useState<string[]>([]);
  const [purpose, setPurpose] = useState<string[]>([]);
  const [condition, setCondition] = useState<string[]>([]);
  const [seasons, setSeasons] = useState<string[]>([]);
  const [specialOccasions, setSpecialOccasions] = useState<string[]>([]);
  const [budget, setBudget] = useState<string | null>(null);

  // ==== LOAD SAVED FILTER ====
  useEffect(() => {
    const saved = sessionStorage.getItem("filters");
    if (saved) {
      const parsed = JSON.parse(saved);
      setSelectedStyles(parsed.selectedStyles || []);
      setSelectedJobs(parsed.selectedJobs || []);
      setColors(parsed.colors || []);
      setPatterns(parsed.patterns || []);
      setLength(parsed.length || null);
      setType(parsed.type || []);
      setPurpose(parsed.purpose || []);
      setCondition(parsed.condition || []);
      setSeasons(parsed.seasons || []);
      setSpecialOccasions(parsed.specialOccasions || []);
      setBudget(parsed.budget || null);
    }
  }, []);

  // ==== SAVE FILTER ====
  useEffect(() => {
    const filters = {
      selectedStyles,
      selectedJobs,
      colors,
      patterns,
      length,
      type,
      purpose,
      condition,
      seasons,
      specialOccasions,
      budget,
    };
    sessionStorage.setItem("filters", JSON.stringify(filters));
  }, [
    selectedStyles,
    selectedJobs,
    colors,
    patterns,
    length,
    type,
    purpose,
    condition,
    seasons,
    specialOccasions,
    budget,
  ]);

  const searchParams = useSearchParams();
  const s = searchParams.get("s") || "";

  const filterProducts = () => {
    return mockProducts.filter((p) =>
      selectedStyles.concat(selectedJobs).some((tag) => p.tags.includes(tag))
    );
  };

  return (
    <div className="container">
      {s && (
        <h3 style={{ marginTop: 20 }}>
          k·∫øt qu·∫£ t√¨m ki·∫øm t·ª´: <strong>{s}</strong>
        </h3>
      )}
      <div className="container" style={{ display: "flex", padding: 20 }}>
        {/* FILTER COLUMN */}
        <div style={{ width: 300, marginRight: 20 }}>
          <h3>üßç‚Äç‚ôÄÔ∏è Th√¥ng tin c√° nh√¢n & s·ªü th√≠ch</h3>

          <Divider plain>Phong c√°ch y√™u th√≠ch</Divider>
          <Checkbox.Group
            value={selectedStyles}
            options={[
              "N·ªØ t√≠nh / d·ªãu d√†ng",
              "C√° t√≠nh / n·ªïi b·∫≠t",
              "T·ªëi gi·∫£n / thanh l·ªãch",
              "Sang tr·ªçng / qu√Ω ph√°i",
              "D·ªÖ th∆∞∆°ng / nƒÉng ƒë·ªông",
            ]}
            onChange={(val) => setSelectedStyles(val as string[])}
          />

          <Divider plain>Ngh·ªÅ nghi·ªáp</Divider>
          <Checkbox.Group
            value={selectedJobs}
            options={[
              "VƒÉn ph√≤ng",
              "Ngh·ªá thu·∫≠t",
              "Sinh vi√™n",
              "Lao ƒë·ªông tay ch√¢n",
              "T·ª± do",
            ]}
            onChange={(val) => setSelectedJobs(val as string[])}
          />

          <Divider plain>üé® Th·∫©m m·ªπ & nhu c·∫ßu</Divider>
          <Checkbox.Group
            value={colors}
            options={["ƒê·ªè", "H·ªìng", "Xanh", "V√†ng", "T√≠m", "ƒêen", "Tr·∫Øng"]}
            onChange={(val) => setColors(val as string[])}
          />

          <Divider plain>H·ªça ti·∫øt</Divider>
          <Checkbox.Group
            value={patterns}
            options={[
              "Hoa l√°",
              "Ho·∫°t h√¨nh",
              "ƒê√°",
              "Kim tuy·∫øn",
              "Tr∆°n",
              "V·∫Ω tay",
            ]}
            onChange={(val) => setPatterns(val as string[])}
          />

          <Divider plain>ƒê·ªô d√†i m√≥ng</Divider>
          <Radio.Group
            value={length}
            onChange={(e) => setLength(e.target.value)}
          >
            <Radio value="Ng·∫Øn">Ng·∫Øn</Radio>
            <Radio value="Trung b√¨nh">Trung b√¨nh</Radio>
            <Radio value="D√†i">D√†i</Radio>
          </Radio.Group>

          <Divider plain>Lo·∫°i m√≥ng</Divider>
          <Checkbox.Group
            value={type}
            options={["M√≥ng th·∫≠t", "M√≥ng √∫p", "M√≥ng gel", "M√≥ng b·ªôt"]}
            onChange={(val) => setType(val as string[])}
          />

          <Divider plain>M·ª•c ƒë√≠ch l√†m m√≥ng</Divider>
          <Checkbox.Group
            value={purpose}
            options={["ƒêi ch∆°i", "ƒêi l√†m", "Du l·ªãch", "D·ªãp ƒë·∫∑c bi·ªát"]}
            onChange={(val) => setPurpose(val as string[])}
          />

          <Divider plain>T√¨nh tr·∫°ng m√≥ng</Divider>
          <Checkbox.Group
            value={condition}
            options={["M√≥ng y·∫øu", "M√≥ng kho·∫ª", "C√≥ m√≥ng gi·∫£"]}
            onChange={(val) => setCondition(val as string[])}
          />

          <Divider plain>üìÖ Th·ªùi gian & xu h∆∞·ªõng</Divider>
          <Checkbox.Group
            value={seasons}
            options={["Xu√¢n", "H√®", "Thu", "ƒê√¥ng"]}
            onChange={(val) => setSeasons(val as string[])}
          />

          <Divider plain>D·ªãp ƒë·∫∑c bi·ªát</Divider>
          <Checkbox.Group
            value={specialOccasions}
            options={["Valentine", "Gi√°ng sinh", "T·∫øt"]}
            onChange={(val) => setSpecialOccasions(val as string[])}
          />

          <Divider plain>Ng√¢n s√°ch</Divider>
          <Radio.Group
            value={budget}
            onChange={(e) => setBudget(e.target.value)}
          >
            <Radio value="<200K">&lt;200K</Radio>
            <Radio value="200‚Äì400K">200‚Äì400K</Radio>
            <Radio value=">400K">400K+</Radio>
          </Radio.Group>
        </div>

        {/* PRODUCT DISPLAY COLUMN */}
        <div style={{ flex: 1 }}>
          <h3>S·∫£n ph·∫©m g·ª£i √Ω</h3>
          <Row gutter={[16, 16]}>
            {filterProducts().map((product) => (
              <Col key={product.id} span={8}>
                <div
                  style={{
                    border: "1px solid #ccc",
                    padding: 10,
                    borderRadius: 8,
                  }}
                >
                  <h4>{product.name}</h4>
                  <p>Tags: {product.tags.join(", ")}</p>
                </div>
              </Col>
            ))}
            <ListProduct />
          </Row>
        </div>
      </div>
    </div>
  );
}
